/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parseAccelerator = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"test":3,"INT":4,"eof":5,"STRING":6,"verilogModule":7,"moduleHeader":8,"moduleBody":9,"endmodule":10,"MODULE":11,"(":12,")":13,";":14,"names":15,"declarations":16,"assignStatements":17,"dataPaths":18,"dataPathT":19,"dataPath":20,"namesWithNameIO":21,",":22,".":23,"lval":24,"assignStatement":25,"ASSIGN":26,"=":27,"rvalEx":28,"subArray":29,"expression":30,"?":31,":":32,"terminalVal":33,"+":34,"-":35,"==":36,"&&":37,"!":38,"constant":39,"declaration":40,"type":41,"identifiers":42,"REG":43,"WIRE":44,"INPUT":45,"OUTPUT":46,"datapath":47,"size":48,"identifiers_r":49,"[":50,"]":51,"$accept":0,"$end":1},
terminals_: {2:"error",4:"INT",5:"eof",6:"STRING",10:"endmodule",11:"MODULE",12:"(",13:")",14:";",22:",",23:".",26:"ASSIGN",27:"=",31:"?",32:":",34:"+",35:"-",36:"==",37:"&&",38:"!",43:"REG",44:"WIRE",45:"INPUT",46:"OUTPUT",50:"[",51:"]"},
productions_: [0,[3,2],[3,2],[7,4],[8,5],[8,6],[9,3],[9,2],[18,1],[18,0],[19,2],[19,1],[20,6],[20,6],[20,5],[21,7],[21,5],[17,2],[17,1],[25,5],[24,1],[24,2],[28,1],[28,5],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[33,1],[33,1],[39,1],[16,1],[16,0],[40,3],[40,2],[41,1],[41,1],[41,1],[41,1],[41,2],[41,2],[47,1],[42,2],[42,1],[49,4],[49,2],[15,3],[15,1],[29,3],[29,5],[48,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3: return ModuleHandler;
break;
case 4: ModuleHandler.addModule($$[$0-3]);console.log('Module ',$$[$0-3])
break;
case 5: ModuleHandler.addModule($$[$0-4],$$[$0-2]);console.log('Module ',$$[$0-4],' anmes: ',$$[$0-2])
break;
case 10:ModuleHandler.setStartStatementLine();
break;
case 11:ModuleHandler.setStartStatementLine();
break;
case 12: this.$ = ModuleHandler.addModuleInstance( new ModuleInstance($$[$0-5], new ListModuleIOWires($$[$0-2])  )); 
break;
case 13:this.$ = ModuleHandler.addModuleInstance(new ModuleInstance($$[$0-5], new ListModuleIOWires($$[$0-2])  )); 
break;
case 15:  var kunt = ($$[$0-6]); kunt.push(new NameIO($$[$0-3],$$[$0-1])) 
break;
case 16:  this.$ =[new NameIO($$[$0-3],$$[$0-1])] 
break;
case 17: ModuleHandler.setStartStatementLine();
break;
case 18:ModuleHandler.setStartStatementLine();
break;
case 19: ModuleHandler.addAssign($$[$0-3],$$[$0-1]);  
break;
case 20:this.$ = new Expression({identifier:ModuleHandler.getIdentifier($$[$0]),index:undefined});
break;
case 21:this.$ = new Expression({identifier:ModuleHandler.getIdentifier($$[$0-1]),index:$$[$0]});
break;
case 23:this.$ = new ContinousAssign($$[$0-4],$$[$0-2],$$[$0]);
break;
case 25:this.$ = new AritOp($$[$0-1],$$[$0-2],$$[$0])
break;
case 26:this.$ = new AritOp($$[$0-1],$$[$0-2],$$[$0])
break;
case 27:this.$ = new LogicOp($$[$0-1],$$[$0-2],$$[$0])
break;
case 28:this.$ = new LogicOp($$[$0-1],$$[$0-2],$$[$0])
break;
case 29:this.$ = $$[$0-1]
break;
case 30:this.$ = new NotOp($$[$0]);
break;
case 31:this.$ = new NegOP($$[$0]);
break;
case 32:this.$ = $$[$0];
break;
case 33:this.$ = Expression.constant($$[$0]);
break;
case 34:this.$ = parseInt($$[$0])
break;
case 35:ModuleHandler.setStartStatementLine();
break;
case 37:var ident = $$[$0]; ident.type = $$[$0-1];  ModuleHandler.addIdentifier(ident); 
break;
case 38:var ident = $$[$0]; ident.type =  $$[$0-1];  ModuleHandler.addIdentifier(ident); 
break;
case 39:this.$ = ['reg']
break;
case 40:this.$ = ['wire']
break;
case 41:this.$ = ['input']
break;
case 42:this.$ = ['output']
break;
case 43:this.$ = ['input','wire']
break;
case 44:this.$ = ['output','reg']
break;
case 46: this.$ = {size:$$[$0-1],identifiers:$$[$0],type:undefined};
break;
case 47: this.$ = {size: new ArrayIndices([1]),identifiers:$$[$0],type:undefined};
break;
case 48: var kunt = $$[$0-3]; kunt.push($$[$0-1]);   
break;
case 49: this.$=[$$[$0-1]]; 
break;
case 50:  var kunt = $$[$0-2]; kunt.push($$[$0]); this.$ = kunt; 
break;
case 51: this.$ = [$$[$0]] 
break;
case 52: this.$ = new ArrayIndices([parseInt($$[$0-1])]); 
break;
case 53: this.$ = new ArrayIndices([ parseInt($$[$0-3]),parseInt($$[$0-1])]); 
break;
case 54: this.$ = new ArrayIndices([parseInt($$[$0-3]),parseInt($$[$0-1])]); 
break;
}
},
table: [{7:1,8:2,11:[1,3]},{1:[3]},{6:[2,36],9:4,10:[2,36],16:5,26:[2,36],40:6,41:7,43:[1,8],44:[1,9],45:[1,10],46:[1,11]},{6:[1,12]},{10:[1,13]},{6:[1,20],10:[2,9],17:14,18:15,19:17,20:19,25:16,26:[1,18]},{6:[2,35],10:[2,35],26:[2,35],41:21,43:[1,8],44:[1,9],45:[1,10],46:[1,11]},{6:[1,27],15:26,42:22,48:23,49:24,50:[1,25]},{6:[2,39],50:[2,39]},{6:[2,40],50:[2,40]},{6:[2,41],44:[1,28],50:[2,41]},{6:[2,42],43:[1,29],50:[2,42]},{12:[1,30]},{5:[1,31]},{6:[1,20],10:[2,9],18:32,19:17,20:19,25:33,26:[1,18]},{10:[2,7]},{6:[2,18],10:[2,18],26:[2,18]},{6:[1,20],10:[2,8],20:34},{6:[1,36],24:35},{6:[2,11],10:[2,11]},{6:[1,37]},{6:[1,27],15:26,42:38,48:23,49:24,50:[1,25]},{6:[2,38],10:[2,38],26:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38]},{6:[1,27],15:26,49:39},{6:[2,47],10:[2,47],26:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47]},{4:[1,40]},{22:[1,41]},{14:[1,42],22:[2,51]},{6:[2,43],50:[2,43]},{6:[2,44],50:[2,44]},{6:[1,45],13:[1,43],15:44},{1:[2,3]},{10:[2,6]},{6:[2,17],10:[2,17],26:[2,17]},{6:[2,10],10:[2,10]},{27:[1,46]},{13:[2,20],14:[2,20],27:[2,20],29:47,31:[2,20],32:[2,20],34:[2,20],35:[2,20],36:[2,20],37:[2,20],50:[1,48]},{12:[1,49]},{6:[2,37],10:[2,37],26:[2,37],43:[2,37],44:[2,37],45:[2,37],46:[2,37]},{6:[2,46],10:[2,46],26:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46]},{32:[1,50]},{6:[1,51]},{6:[2,49],10:[2,49],26:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49]},{14:[1,52]},{13:[1,53],22:[1,54]},{13:[2,51],22:[2,51]},{4:[1,63],6:[1,36],12:[1,58],24:61,28:55,30:56,33:57,35:[1,60],38:[1,59],39:62},{13:[2,21],14:[2,21],27:[2,21],31:[2,21],32:[2,21],34:[2,21],35:[2,21],36:[2,21],37:[2,21]},{4:[1,64]},{6:[1,45],13:[1,67],15:65,21:66,23:[1,68]},{4:[1,69]},{14:[1,70],22:[2,50]},{6:[2,4],10:[2,4],26:[2,4],43:[2,4],44:[2,4],45:[2,4],46:[2,4]},{14:[1,71]},{6:[1,72]},{14:[1,73]},{14:[2,22],31:[1,74],34:[1,75],35:[1,76],36:[1,77],37:[1,78]},{13:[2,24],14:[2,24],31:[2,24],32:[2,24],34:[2,24],35:[2,24],36:[2,24],37:[2,24]},{4:[1,63],6:[1,36],12:[1,58],24:61,30:79,33:57,35:[1,60],38:[1,59],39:62},{4:[1,63],6:[1,36],12:[1,58],24:61,30:80,33:57,35:[1,60],38:[1,59],39:62},{4:[1,63],6:[1,36],12:[1,58],24:61,30:81,33:57,35:[1,60],38:[1,59],39:62},{13:[2,32],14:[2,32],31:[2,32],32:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32]},{13:[2,33],14:[2,33],31:[2,33],32:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33]},{13:[2,34],14:[2,34],31:[2,34],32:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34]},{32:[1,83],51:[1,82]},{13:[1,84],22:[1,54]},{13:[1,85],22:[1,86]},{14:[1,87]},{6:[1,88]},{51:[1,89]},{6:[2,48],10:[2,48],26:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48]},{6:[2,5],10:[2,5],26:[2,5],43:[2,5],44:[2,5],45:[2,5],46:[2,5]},{13:[2,50],22:[2,50]},{6:[2,19],10:[2,19],26:[2,19]},{4:[1,63],6:[1,36],12:[1,58],24:61,30:90,33:57,35:[1,60],38:[1,59],39:62},{4:[1,63],6:[1,36],12:[1,58],24:61,30:91,33:57,35:[1,60],38:[1,59],39:62},{4:[1,63],6:[1,36],12:[1,58],24:61,30:92,33:57,35:[1,60],38:[1,59],39:62},{4:[1,63],6:[1,36],12:[1,58],24:61,30:93,33:57,35:[1,60],38:[1,59],39:62},{4:[1,63],6:[1,36],12:[1,58],24:61,30:94,33:57,35:[1,60],38:[1,59],39:62},{13:[1,95],34:[1,75],35:[1,76],36:[1,77],37:[1,78]},{13:[2,30],14:[2,30],31:[2,30],32:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[2,30]},{13:[2,31],14:[2,31],31:[2,31],32:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[2,31]},{13:[2,52],14:[2,52],27:[2,52],31:[2,52],32:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52]},{4:[1,96]},{14:[1,97]},{14:[1,98]},{23:[1,99]},{6:[2,14],10:[2,14]},{12:[1,100]},{6:[2,54]},{32:[1,101],34:[1,75],35:[1,76],36:[1,77],37:[1,78]},{13:[2,25],14:[2,25],31:[2,25],32:[2,25],34:[2,25],35:[2,25],36:[1,77],37:[1,78]},{13:[2,26],14:[2,26],31:[2,26],32:[2,26],34:[2,26],35:[2,26],36:[1,77],37:[1,78]},{13:[2,27],14:[2,27],31:[2,27],32:[2,27],34:[2,27],35:[2,27],36:[2,27],37:[2,27]},{13:[2,28],14:[2,28],31:[2,28],32:[2,28],34:[2,28],35:[2,28],36:[2,28],37:[2,28]},{13:[2,29],14:[2,29],31:[2,29],32:[2,29],34:[2,29],35:[2,29],36:[2,29],37:[2,29]},{51:[1,102]},{6:[2,12],10:[2,12]},{6:[2,13],10:[2,13]},{6:[1,103]},{6:[1,36],24:104},{4:[1,63],6:[1,36],12:[1,58],24:61,30:105,33:57,35:[1,60],38:[1,59],39:62},{13:[2,53],14:[2,53],27:[2,53],31:[2,53],32:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53]},{12:[1,106]},{13:[1,107]},{14:[2,23],34:[1,75],35:[1,76],36:[1,77],37:[1,78]},{6:[1,36],24:108},{13:[2,16],22:[2,16]},{13:[1,109]},{13:[2,15],22:[2,15]}],
defaultActions: {15:[2,7],31:[2,3],32:[2,6],89:[2,54]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var ModuleHandlerFile = require('./ModuleHandler');
	var ModuleHandler = ModuleHandlerFile.ModuleHandler;
	var Module = ModuleHandlerFile.Module;
	var NameIO = ModuleHandlerFile.NameIO;
	var ContinousAssign = ModuleHandlerFile.ContinousAssign;
	var AritOp = ModuleHandlerFile.AritOp;
	var LogicOp = ModuleHandlerFile.LogicOp;
	var NotOp = ModuleHandlerFile.NotOp;
	var NegOP = ModuleHandlerFile.NegOP;
	var ArrayIndices = ModuleHandlerFile.ArrayIndices;
	var Expression = ModuleHandlerFile.Expression;
	var ModuleInstance = ModuleHandlerFile.ModuleInstance;
	var ListModuleIOWires = ModuleHandlerFile.ListModuleIOWires;
	// var Module = ModuleHandlerFile.module;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:;
break;
case 2:  return yy_.yytext;
break;
case 3: return yy_.yytext[0];
break;
case 4: return 11; 
break;
case 5: /*ModuleHandler.setStartStatementLine();*/ return 26; 
break;
case 6: return 45; 
break;
case 7: return 46; 
break;
case 8: return 44; 
break;
case 9: return 43; 
break;
case 10: return 10
break;
case 11: return 'TYPE'; 
break;
case 12: return 'END'; 
break;
case 13: /*console.log('string');*/ return 6
break;
case 14: return 'FLOAT'; 
break;
case 15: /*console.log('number');*/ return 4; 
break;
case 16:console.log("comentario!!!\n");  this.begin('comment');
break;
case 17:ModuleHandler.incLine();
break;
case 18:return 5;
break;
case 19:console.log("Error: not Recognized: '%s'\n",yy_.yytext ); return 'INVALID';
break;
case 20:this.begin('INITIAL');console.log("Termino Comments");
break;
case 21:ModuleHandler.incLine();
break;
case 22:console.log("Estoy comment");
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[ \t])/,/^(?:==|&&)/,/^(?:[\[\]\(\);,:\.=?!\+\-])/,/^(?:module\b)/,/^(?:assign\b)/,/^(?:input\b)/,/^(?:output\b)/,/^(?:wire\b)/,/^(?:reg\b)/,/^(?:endmodule\b)/,/^(?:type\b)/,/^(?:end\b)/,/^(?:[a-zA-Z_]+([0-9]*[a-zA-Z_]*)*)/,/^(?:[0-9]+\.[0-9]+)/,/^(?:[0-9]+)/,/^(?:(?=t))/,/^(?:\n)/,/^(?:$)/,/^(?:.)/,/^(?:(?=t))/,/^(?:\n)/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parseAccelerator;
exports.Parser = parseAccelerator.Parser;
exports.parse = function () { return parseAccelerator.parse.apply(parseAccelerator, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}